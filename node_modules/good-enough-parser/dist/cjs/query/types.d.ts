import type { CommentToken, MinorToken, NumberToken, OperatorToken, SymbolToken } from '../lexer/types';
import type { Cursor, Node, StringTree, TemplateTree, Tree, TreeType } from '../parser/types';
import type { StrContentMatcherHandler } from './matchers/str-matcher';
export interface Checkpoint<Ctx> {
    cursor: Cursor;
    context: Ctx;
}
export declare type NodeHandler<Ctx, T = Node> = (ctx: Ctx, tree: T) => Ctx;
export declare type SymMatcherValue = string | RegExp | null;
export declare type SymMatcherHandler<Ctx> = NodeHandler<Ctx, SymbolToken>;
export interface SymMatcherOptions<Ctx> {
    value: SymMatcherValue;
    handler: SymMatcherHandler<Ctx> | null;
}
export declare type OpMatcherValue = string | RegExp | null;
export declare type OpMatcherHandler<Ctx> = NodeHandler<Ctx, OperatorToken>;
export interface OpMatcherOptions<Ctx> {
    value: OpMatcherValue;
    handler: OpMatcherHandler<Ctx> | null;
}
export declare type CommentMatcherValue = string | RegExp | null;
export declare type CommentMatcherHandler<Ctx> = NodeHandler<Ctx, CommentToken>;
export interface CommentMatcherOptions<Ctx> {
    value: CommentMatcherValue;
    handler: CommentMatcherHandler<Ctx> | null;
}
export declare type NumMatcherValue = string | RegExp | null;
export declare type NumMatcherHandler<Ctx> = NodeHandler<Ctx, NumberToken>;
export interface NumMatcherOptions<Ctx> {
    value: NumMatcherValue;
    handler: NumMatcherHandler<Ctx> | null;
}
export interface SeqMatcherOptions<Ctx> {
    matchers: Matcher<Ctx>[];
}
export declare type TreeMatcherType = TreeType | null;
export declare type TreeMatcherHandler<Ctx> = NodeHandler<Ctx, Tree>;
export interface TreeOptionsBase<Ctx> {
    type?: TreeMatcherType;
    maxDepth?: number | null;
    maxMatches?: number | null;
    preHandler?: TreeMatcherHandler<Ctx>;
    postHandler?: TreeMatcherHandler<Ctx>;
}
export interface Matcher<Ctx> {
    seekNext(cursor: Cursor): Cursor;
    match(checkpoint: Checkpoint<Ctx>): Checkpoint<Ctx> | null;
    nextMatch(): Checkpoint<Ctx> | null;
    readonly preventSkipping?: MinorToken['type'];
}
export interface ManyBuilderOpts<Ctx> {
    builder: QueryBuilder<Ctx>;
    min: number;
    max: number | null;
}
export interface ManyMatcherOptions<Ctx> {
    matcher: Matcher<Ctx>;
    min: number;
    max: number | null;
}
export interface TreeBuilderOptions<Ctx> extends TreeOptionsBase<Ctx> {
    search?: QueryBuilder<Ctx> | null;
}
export interface AltMatcherOptions<Ctx> {
    matchers: Matcher<Ctx>[];
}
export declare type StrTreeHandler<Ctx> = NodeHandler<Ctx, StringTree>;
export interface StrTreeOptionsBase<Ctx> {
    preHandler?: StrTreeHandler<Ctx> | null;
    postHandler?: StrTreeHandler<Ctx> | null;
}
declare type StrTplHandler<Ctx> = NodeHandler<Ctx, TemplateTree>;
export interface StrTplOptionsBase<Ctx> {
    preHandler?: StrTplHandler<Ctx> | null;
    postHandler?: StrTplHandler<Ctx> | null;
}
export interface StrContentBuilderOptionsBase<Ctx> {
    match?: string | RegExp | null;
    handler?: StrContentMatcherHandler<Ctx> | null;
}
export interface StrTreeBuilderOptionsBase<Ctx> {
    match?: (string | RegExp | QueryBuilder<Ctx>)[] | null;
    preHandler?: NodeHandler<Ctx, StringTree> | null;
    postHandler?: NodeHandler<Ctx, StringTree> | null;
}
export declare type StrBuilderOptionsBase<Ctx> = StrContentBuilderOptionsBase<Ctx> | StrTreeBuilderOptionsBase<Ctx>;
export interface StrContentBuilderOptions<Ctx> extends StrContentBuilderOptionsBase<Ctx> {
    type: 'str-content';
}
export interface StrTreeBuilderOptions<Ctx> extends StrTreeBuilderOptionsBase<Ctx> {
    type: 'str-tree';
}
export declare type StrBuilderOptions<Ctx> = StrContentBuilderOptions<Ctx> | StrTreeBuilderOptions<Ctx>;
export interface QueryBuilder<Ctx> {
    build(): Matcher<Ctx>;
}
export {};
//# sourceMappingURL=types.d.ts.map