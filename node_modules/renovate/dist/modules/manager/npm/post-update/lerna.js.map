{"version":3,"file":"lerna.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/post-update/lerna.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../../../config/global';\nimport { TEMPORARY_ERROR } from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { exec } from '../../../../util/exec';\nimport type {\n  ExecOptions,\n  ExtraEnv,\n  ToolConstraint,\n} from '../../../../util/exec/types';\nimport type { PackageFile, PostUpdateConfig } from '../../types';\nimport { getNodeToolConstraint } from './node-version';\nimport type { GenerateLockFileResult } from './types';\n\n// Exported for testability\nexport function getLernaVersion(\n  lernaPackageFile: Partial<PackageFile>\n): string {\n  const lernaDep = lernaPackageFile.deps?.find((d) => d.depName === 'lerna');\n  if (!lernaDep?.currentValue || !semver.validRange(lernaDep.currentValue)) {\n    logger.warn(\n      // TODO: types (#7154)\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `Could not detect lerna version in ${lernaPackageFile.packageFile}, using 'latest'`\n    );\n    return 'latest';\n  }\n  return lernaDep.currentValue;\n}\n\nexport async function generateLockFiles(\n  lernaPackageFile: Partial<PackageFile>,\n  lockFileDir: string,\n  config: PostUpdateConfig,\n  env: NodeJS.ProcessEnv,\n  skipInstalls?: boolean\n): Promise<GenerateLockFileResult> {\n  const lernaClient = lernaPackageFile.lernaClient;\n  if (!lernaClient) {\n    logger.warn('No lernaClient specified - returning');\n    return { error: false };\n  }\n  logger.debug(`Spawning lerna with ${lernaClient} to create lock files`);\n  const toolConstraints: ToolConstraint[] = [\n    await getNodeToolConstraint(config, []),\n  ];\n  const cmd: string[] = [];\n  let cmdOptions = '';\n  try {\n    if (lernaClient === 'yarn') {\n      const yarnTool: ToolConstraint = {\n        toolName: 'yarn',\n        constraint: '^1.22.18', // needs to be a v1 yarn, otherwise v2 will be installed\n      };\n      const yarnCompatibility = config.constraints?.yarn;\n      if (semver.validRange(yarnCompatibility)) {\n        yarnTool.constraint = yarnCompatibility;\n      }\n      toolConstraints.push(yarnTool);\n      if (skipInstalls !== false) {\n        // The following change causes Yarn 1.x to exit gracefully after updating the lock file but without installing node_modules\n        yarnTool.toolName = 'yarn-slim';\n      }\n      cmdOptions = '--ignore-scripts --ignore-engines --ignore-platform';\n    } else if (lernaClient === 'npm') {\n      const npmTool: ToolConstraint = { toolName: 'npm' };\n      const npmCompatibility = config.constraints?.npm;\n      if (semver.validRange(npmCompatibility)) {\n        npmTool.constraint = npmCompatibility;\n      }\n      toolConstraints.push(npmTool);\n      cmdOptions = '--ignore-scripts  --no-audit';\n      if (skipInstalls !== false) {\n        cmdOptions += ' --package-lock-only';\n      }\n    } else {\n      logger.warn({ lernaClient }, 'Unknown lernaClient');\n      return { error: false };\n    }\n    let lernaCommand = `lerna bootstrap --no-ci --ignore-scripts -- `;\n    if (GlobalConfig.get('allowScripts') && config.ignoreScripts !== false) {\n      cmdOptions = cmdOptions.replace('--ignore-scripts ', '');\n      lernaCommand = lernaCommand.replace('--ignore-scripts ', '');\n    }\n    lernaCommand += cmdOptions;\n    const extraEnv: ExtraEnv = {\n      NPM_CONFIG_CACHE: env.NPM_CONFIG_CACHE,\n      npm_config_store: env.npm_config_store,\n    };\n    const execOptions: ExecOptions = {\n      cwdFile: upath.join(lockFileDir, 'package.json'),\n      extraEnv,\n      docker: {\n        image: 'sidecar',\n      },\n      toolConstraints,\n    };\n    // istanbul ignore if\n    if (GlobalConfig.get('exposeAllEnv')) {\n      extraEnv.NPM_AUTH = env.NPM_AUTH;\n      extraEnv.NPM_EMAIL = env.NPM_EMAIL;\n    }\n    const lernaVersion = getLernaVersion(lernaPackageFile);\n    logger.debug('Using lerna version ' + lernaVersion);\n    toolConstraints.push({ toolName: 'lerna', constraint: lernaVersion });\n    cmd.push('lerna info || echo \"Ignoring lerna info failure\"');\n    cmd.push(`${lernaClient} install ${cmdOptions}`);\n    cmd.push(lernaCommand);\n    await exec(cmd, execOptions);\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug(\n      {\n        cmd,\n        err,\n        type: 'lerna',\n        lernaClient,\n      },\n      'lock file error'\n    );\n    return { error: true, stderr: err.stderr };\n  }\n  return { error: false };\n}\n"]}