{"version":3,"file":"hermit.js","sourceRoot":"","sources":["../../../lib/util/exec/hermit.ts"],"names":[],"mappings":";;;;AAAA,oDAAoB;AACpB,0DAA0B;AAC1B,gDAAmD;AACnD,yCAAsC;AACtC,8BAAoC;AACpC,qCAAmC;AAGnC,SAAgB,QAAQ;IACtB,MAAM,EAAE,YAAY,EAAE,GAAG,qBAAY,CAAC,GAAG,EAAE,CAAC;IAC5C,OAAO,YAAY,KAAK,QAAQ,CAAC;AACnC,CAAC;AAHD,4BAGC;AAEM,KAAK,UAAU,aAAa,CAAC,GAAW;IAC7C,MAAM,UAAU,GAAG,MAAM,IAAA,gBAAW,EAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IAExD,IAAI,UAAU,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,EAAE,CAAC,CAAC;KAChD;IAED,OAAO,eAAK,CAAC,IAAI,CAAC,qBAAY,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,eAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;AAC7E,CAAC;AARD,sCAQC;AAEM,KAAK,UAAU,aAAa,CACjC,UAA0B;IAE1B,MAAM,GAAG,GAAG,UAAU,CAAC,GAAG,IAAI,EAAE,CAAC;IACjC,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,GAAG,CAAC,CAAC;IAC3C,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,uCAAuC,CAAC,CAAC;IAC1E,wEAAwE;IACxE,MAAM,aAAa,GAAG,MAAM,IAAA,gBAAO,EAAC,iBAAiB,EAAE;QACrD,GAAG,UAAU;QACb,GAAG,EAAE,SAAS;KACf,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,YAAE,CAAC,GAAG,CAAC,CAAC;IAEjD,MAAM,GAAG,GAAG,EAA4B,CAAC;IAEzC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAChC,IAAI,WAAW,KAAK,EAAE,EAAE;YACtB,SAAS;SACV;QACD,MAAM,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC5C,MAAM,IAAI,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAClD,GAAG,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;KACnD;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AA3BD,sCA2BC","sourcesContent":["import os from 'os';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../config/global';\nimport { logger } from '../../logger';\nimport { findUpLocal } from '../fs';\nimport { rawExec } from './common';\nimport type { RawExecOptions } from './types';\n\nexport function isHermit(): boolean {\n  const { binarySource } = GlobalConfig.get();\n  return binarySource === 'hermit';\n}\n\nexport async function findHermitCwd(cwd: string): Promise<string> {\n  const hermitFile = await findUpLocal('bin/hermit', cwd);\n\n  if (hermitFile === null) {\n    throw new Error(`hermit not found for ${cwd}`);\n  }\n\n  return upath.join(GlobalConfig.get('localDir'), upath.dirname(hermitFile));\n}\n\nexport async function getHermitEnvs(\n  rawOptions: RawExecOptions\n): Promise<Record<string, string>> {\n  const cwd = rawOptions.cwd ?? '';\n  const hermitCwd = await findHermitCwd(cwd);\n  logger.debug({ cwd, hermitCwd }, 'fetching hermit environment variables');\n  // with -r will output the raw unquoted environment variables to consume\n  const hermitEnvResp = await rawExec('./hermit env -r', {\n    ...rawOptions,\n    cwd: hermitCwd,\n  });\n\n  const lines = hermitEnvResp.stdout.split(os.EOL);\n\n  const out = {} as Record<string, string>;\n\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (trimmedLine === '') {\n      continue;\n    }\n    const equalIndex = trimmedLine.indexOf('=');\n    const name = trimmedLine.substring(0, equalIndex);\n    out[name] = trimmedLine.substring(equalIndex + 1);\n  }\n\n  return out;\n}\n"]}